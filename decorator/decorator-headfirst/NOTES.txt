Status: working 

Title: Head First Design Patterns using Go — 3. Decorating Objects: the Decorator Pattern
URL: https://faun.pub/head-first-design-patterns-using-go-3-decorating-objects-the-decorator-pattern-c35636722da7
Github: https://github.com/pi-sin/head-first-design-patterns-in-golang

"Design Principle 5: Classes should be open for extension, but closed for modification"

Wiki Definition: 

The Decorator Pattern attaches additional responsibilities to an object dynamically. 

Decorators provide a flexible alternative to subclassing (embedding) for extending functionality

    
    For our Starbuzz Coffee shop, we will start with a beverage and “decorate” it with 
    the condiments at runtime. 
    
    For example, if the customer wants a Dark Roast with mocha and whip, then we’ll:

        1. Take a DarkRoast object 

        2. Decorate it with a condiment Mocha object 

        3. Decorate it with a condiment Whip object

        4. Call the cost() method and rely on delegation to add on the condiment costs.

    So how do we “decorate” an object and how come delegation come into this?
    
    Solution : think of the decorator objects as wrappers.